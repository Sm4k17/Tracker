//
//  CoreDataManager.swift
//  Tracker
//
//  Created by –†—É—Å—Ç–∞–º –•–∞–Ω–∞—Ö–º–µ–¥–æ–≤ on 14.10.2025.
//

import CoreData
import UIKit

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Core Data
final class CoreDataManager {
    
    // MARK: - Singleton
    static let shared = CoreDataManager()
    
    private init() {}
    
    // MARK: - Core Data stack
    
    /// Persistent Container - –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Core Data
    lazy var persistentContainer: NSPersistentContainer = {
        let container = NSPersistentContainer(name: "Tracker")
        
        container.loadPersistentStores { storeDescription, error in
            if let error = error as NSError? {
                fatalError("Unresolved error \(error), \(error.userInfo)")
            } else {
                print("‚úÖ Core Data stack initialized successfully")
                print("üìÅ Database location: \(storeDescription.url?.absoluteString ?? "unknown")")
            }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ª–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        container.viewContext.automaticallyMergesChangesFromParent = true
        
        return container
    }()
    
    // MARK: - Core Data context
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫)
    var context: NSManagedObjectContext {
        return persistentContainer.viewContext
    }
    
    /// –§–æ–Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    var backgroundContext: NSManagedObjectContext {
        return persistentContainer.newBackgroundContext()
    }
    
    // MARK: - Core Data saving support
    
    /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    func saveContext() {
        let context = persistentContainer.viewContext
        
        guard context.hasChanges else {
            print("‚ÑπÔ∏è No changes to save")
            return
        }
        
        do {
            try context.save()
            print("‚úÖ Changes saved successfully")
        } catch {
            let nserror = error as NSError
            context.rollback()
            print("‚ùå Error saving context: \(nserror), \(nserror.userInfo)")
        }
    }
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    func saveBackgroundContext(_ context: NSManagedObjectContext, completion: @escaping (Result<Void, Error>) -> Void) {
        context.perform {
            do {
                try context.save()
                completion(.success(()))
                print("‚úÖ Background context saved successfully")
            } catch {
                context.rollback()
                completion(.failure(error))
                print("‚ùå Error saving background context: \(error)")
            }
        }
    }
    
    // MARK: - Helper Methods
    
    /// –°–±—Ä–æ—Å –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    func resetDatabase() {
        let storeContainer = persistentContainer.persistentStoreCoordinator
        
        do {
            for store in storeContainer.persistentStores {
                try storeContainer.destroyPersistentStore(
                    at: store.url!,
                    ofType: store.type,
                    options: nil
                )
            }
        } catch {
            print("‚ùå Error resetting database: \(error)")
        }
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º stores
        persistentContainer.loadPersistentStores { storeDescription, error in
            if let error = error {
                print("‚ùå Error reloading stores: \(error)")
            } else {
                print("‚úÖ Database reset successfully")
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ –ø—Ä–µ–¥–∏–∫–∞—Ç—É
    func objectExists<T: NSManagedObject>(_ objectType: T.Type, predicate: NSPredicate) -> Bool {
        let context = persistentContainer.viewContext
        let request = NSFetchRequest<T>(entityName: String(describing: objectType))
        request.predicate = predicate
        request.fetchLimit = 1
        
        do {
            let count = try context.count(for: request)
            return count > 0
        } catch {
            print("‚ùå Error checking object existence: \(error)")
            return false
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
    func count<T: NSManagedObject>(_ objectType: T.Type, predicate: NSPredicate? = nil) -> Int {
        let context = persistentContainer.viewContext
        let request = NSFetchRequest<T>(entityName: String(describing: objectType))
        request.predicate = predicate
        
        do {
            return try context.count(for: request)
        } catch {
            print("‚ùå Error counting objects: \(error)")
            return 0
        }
    }
}

// MARK: - Extension for UIColor transformation
extension TrackerCoreData {
    
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ UIColor –≤ Data –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    func setColor(_ color: UIColor) {
        do {
            self.colorTrackers = try NSKeyedArchiver.archivedData(
                withRootObject: color,
                requiringSecureCoding: false
            )
        } catch {
            print("‚ùå Error archiving color: \(error)")
        }
    }
    
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Data –æ–±—Ä–∞—Ç–Ω–æ –≤ UIColor
    func getColor() -> UIColor? {
        guard let data = colorTrackers else { return nil }
        return try? NSKeyedUnarchiver.unarchivedObject(ofClass: UIColor.self, from: data)
    }
    
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Set<Week> –≤ Data –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    func setSchedule(_ schedule: Set<Week>) {
        let weekNumbers = schedule.map { $0.rawValue }
        do {
            self.scheduleTrackers = try JSONEncoder().encode(weekNumbers)
        } catch {
            print("‚ùå Error encoding schedule: \(error)")
        }
    }
    
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Data –æ–±—Ä–∞—Ç–Ω–æ –≤ Set<Week>
    func getSchedule() -> Set<Week> {
        guard let data = scheduleTrackers,
              let weekNumbers = try? JSONDecoder().decode([Int].self, from: data) else {
            return []
        }
        return Set(weekNumbers.compactMap { Week(rawValue: $0) })
    }
}

// MARK: - Quick Access Methods
extension CoreDataManager {
    
    /// –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (—É–¥–æ–±–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ)
    static var context: NSManagedObjectContext {
        return shared.context
    }
    
    /// –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—É–¥–æ–±–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ)
    static func save() {
        shared.saveContext()
    }
}
